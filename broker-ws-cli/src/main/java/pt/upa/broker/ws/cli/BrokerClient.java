package pt.upa.broker.ws.cli;

import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;

import java.net.SocketTimeoutException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.xml.ws.BindingProvider;
import javax.xml.ws.WebServiceException;

import pt.ulisboa.tecnico.sdis.ws.uddi.UDDINaming;
//classes generated by wsimport from WSDL:
import pt.upa.broker.ws.BrokerPortType;
import pt.upa.broker.ws.BrokerService;
import pt.upa.broker.ws.InvalidPriceFault_Exception;
import pt.upa.broker.ws.TransportView;
import pt.upa.broker.ws.UnavailableTransportFault_Exception;
import pt.upa.broker.ws.UnavailableTransportPriceFault_Exception;
import pt.upa.broker.ws.UnknownLocationFault_Exception;
import pt.upa.broker.ws.UnknownTransportFault_Exception;


/**
 * Client.
 *
 * Adds easier endpoint address configuration and 
 * UDDI lookup capability to the PortType generated by wsimport.
 */
public class BrokerClient implements BrokerPortType{
	/** WS service */
	BrokerService service = null;

	/** WS port (port type is the interface, port is the implementation) */
	BrokerPortType port = null;

	/** UDDI server URL */
	private String uddiURL = null;

	/** WS name */
	private String wsName = null;

	/** WS endpoint address */
	private String wsURL = null; // default value is defined inside WSDL
	
	public String getWsURL() {
		return wsURL;
	}

	/** output option **/
	private boolean verbose = true;
	
	private Map<String, Object> requestContext;
	
	public boolean isVerbose() {
		return verbose;
	}

	public void setVerbose(boolean verbose) {
		this.verbose = verbose;
	}

	/** constructor with provided web service URL */
	public BrokerClient(String wsURL) throws BrokerClientException {
		this.wsURL = wsURL;
		createStub();
	}

	/** constructor with provided UDDI location and name */
	public BrokerClient(String uddiURL, String wsName) throws BrokerClientException {
		this.uddiURL = uddiURL;
		this.wsName = wsName;
		uddiLookup();
		createStub();
	}

	/** UDDI lookup */
	private void uddiLookup() throws BrokerClientException {
		try {
			if (verbose)
				System.out.printf("Contacting UDDI at %s%n", uddiURL);
			UDDINaming uddiNaming = new UDDINaming(uddiURL);

			if (verbose)
				System.out.printf("Looking for '%s'%n", wsName);
			wsURL = uddiNaming.lookup(wsName);

		} catch (Exception e) {
			String msg = String.format("Client failed lookup on UDDI at %s!",uddiURL);
			throw new BrokerClientException(msg, e);
		}

		if (wsURL == null) {
			String msg = String.format(
					"Service with name %s not found on UDDI at %s", wsName,uddiURL);
			throw new BrokerClientException(msg);
		}
	}

	/** Stub creation and configuration */
	private void createStub() {
		if (verbose)
			System.out.println("Creating stub ...");
		service = new BrokerService();
		port = service.getBrokerPort();

		if (wsURL != null) {
			if (verbose)
				System.out.println("Setting endpoint address ...");
			BindingProvider bindingProvider = (BindingProvider) port;
			requestContext = bindingProvider.getRequestContext();
			requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);
			
			int receiveTimeout = 3000;
		        
	        final List<String> RECV_TIME_PROPS = new ArrayList<String>();
	        RECV_TIME_PROPS.add("com.sun.xml.ws.request.timeout");
	        RECV_TIME_PROPS.add("com.sun.xml.internal.ws.request.timeout");
	        RECV_TIME_PROPS.add("javax.xml.ws.client.receiveTimeout");
	        
	        for (String propName : RECV_TIME_PROPS)
	            requestContext.put(propName, receiveTimeout);
	        System.out.printf("Set receive timeout to %d milliseconds%n", receiveTimeout);
		}
	}

	// remote invocation methods ----------------------------------------------

	@Override
	public String ping(String name) {	
		
        String ping = null;
		
		while(ping == null){
			try{
				ping = port.ping(name);
			} catch(WebServiceException wse){
				System.out.println("Caught: " + wse);
			} catch(Exception e){
				try {
					System.out.println("Waiting for broker to change...");
					Thread.sleep((long)1500);
				} catch (InterruptedException e1) { e1.printStackTrace(); }
			}
		}
		
		return ping;
	}

	@Override
	public String requestTransport(String origin, String destination, int price)
			throws InvalidPriceFault_Exception, UnavailableTransportFault_Exception,
			UnavailableTransportPriceFault_Exception, UnknownLocationFault_Exception {

		String request = null;
		
		while(request == null){
			try{
				request = port.requestTransport(origin, destination, price);
			} catch(InvalidPriceFault_Exception | UnavailableTransportFault_Exception |
					UnavailableTransportPriceFault_Exception| UnknownLocationFault_Exception e){
				throw e;
			} catch(WebServiceException wse){
				System.out.println("Caught: " + wse);
			} catch(Exception e1){
				try {
					Thread.sleep((long)1500);
				} catch (InterruptedException e2) { e2.printStackTrace(); }
			}
		}
		
		return request;
	}

	@Override
	public TransportView viewTransport(String id) throws UnknownTransportFault_Exception {

		TransportView view = null;
		
		while(view == null){
			try{
				view = port.viewTransport(id);
			} catch(UnknownTransportFault_Exception e){
				throw e;
			} catch(WebServiceException wse){
				System.out.println("Caught: " + wse);
			} catch(Exception e1){
				try {
					Thread.sleep((long)1500);
				} catch (InterruptedException e2) { e2.printStackTrace(); }
			}
		}
		
		return view;
	}

	@Override
	public List<TransportView> listTransports() {
		
		List<TransportView> tViews = null;
		
		while(tViews== null){
			try{
				tViews = port.listTransports();
			} catch(WebServiceException wse){
				System.out.println("Caught: " + wse);
			} catch(Exception e){
				try {
					Thread.sleep((long)1500);
				} catch (InterruptedException e1) { e1.printStackTrace(); }
			}
		}
		
		return tViews;
	}

	@Override
	public void clearTransports() {
		try{
			port.clearTransports();

		} catch(WebServiceException wse){
			System.out.println("Caught: " + wse);
		} catch(Exception e){
			try {
				Thread.sleep((long)1500);
			} catch (InterruptedException e1) { e1.printStackTrace(); }
		}
	}
	
	@Override
	public void update(List<TransportView> view) {
	}
	
}
